// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: catcatcat/catcatcat.proto

package catcatcat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Catcatcat_ListCats_FullMethodName = "/catcatcat.Catcatcat/ListCats"
	Catcatcat_GetCdps_FullMethodName  = "/catcatcat.Catcatcat/GetCdps"
)

// CatcatcatClient is the client API for Catcatcat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The catcatcat service definition
type CatcatcatClient interface {
	ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error)
	GetCdps(ctx context.Context, in *GetCdpsRequest, opts ...grpc.CallOption) (*GetCdpsResponse, error)
}

type catcatcatClient struct {
	cc grpc.ClientConnInterface
}

func NewCatcatcatClient(cc grpc.ClientConnInterface) CatcatcatClient {
	return &catcatcatClient{cc}
}

func (c *catcatcatClient) ListCats(ctx context.Context, in *ListCatsRequest, opts ...grpc.CallOption) (*ListCatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCatsResponse)
	err := c.cc.Invoke(ctx, Catcatcat_ListCats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catcatcatClient) GetCdps(ctx context.Context, in *GetCdpsRequest, opts ...grpc.CallOption) (*GetCdpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCdpsResponse)
	err := c.cc.Invoke(ctx, Catcatcat_GetCdps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatcatcatServer is the server API for Catcatcat service.
// All implementations should embed UnimplementedCatcatcatServer
// for forward compatibility.
//
// The catcatcat service definition
type CatcatcatServer interface {
	ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error)
	GetCdps(context.Context, *GetCdpsRequest) (*GetCdpsResponse, error)
}

// UnimplementedCatcatcatServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatcatcatServer struct{}

func (UnimplementedCatcatcatServer) ListCats(context.Context, *ListCatsRequest) (*ListCatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCats not implemented")
}
func (UnimplementedCatcatcatServer) GetCdps(context.Context, *GetCdpsRequest) (*GetCdpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCdps not implemented")
}
func (UnimplementedCatcatcatServer) testEmbeddedByValue() {}

// UnsafeCatcatcatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatcatcatServer will
// result in compilation errors.
type UnsafeCatcatcatServer interface {
	mustEmbedUnimplementedCatcatcatServer()
}

func RegisterCatcatcatServer(s grpc.ServiceRegistrar, srv CatcatcatServer) {
	// If the following call pancis, it indicates UnimplementedCatcatcatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Catcatcat_ServiceDesc, srv)
}

func _Catcatcat_ListCats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatcatcatServer).ListCats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catcatcat_ListCats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatcatcatServer).ListCats(ctx, req.(*ListCatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catcatcat_GetCdps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCdpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatcatcatServer).GetCdps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catcatcat_GetCdps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatcatcatServer).GetCdps(ctx, req.(*GetCdpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catcatcat_ServiceDesc is the grpc.ServiceDesc for Catcatcat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catcatcat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catcatcat.Catcatcat",
	HandlerType: (*CatcatcatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCats",
			Handler:    _Catcatcat_ListCats_Handler,
		},
		{
			MethodName: "GetCdps",
			Handler:    _Catcatcat_GetCdps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catcatcat/catcatcat.proto",
}
